// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and account management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  dbConnections DbConnection[]
  indexingJobs  IndexingJob[]
  accounts      Account[]
  sessions      Session[]
}

// NextAuth models for authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Database connection credentials
model DbConnection {
  id        String   @id @default(cuid())
  name      String
  host      String
  port      Int
  database  String
  username  String
  password  String
  userId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  indexingJobs IndexingJob[]
}

// Indexing job definition
model IndexingJob {
  id             String           @id @default(cuid())
  name           String
  description    String?
  userId         String
  dbConnectionId String
  webhookUrl     String?
  webhookSecret  String?
  dataType       DataType
  config         Json
  status         IndexingStatus   @default(INACTIVE)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  lastRun        DateTime?
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  dbConnection DbConnection  @relation(fields: [dbConnectionId], references: [id], onDelete: Cascade)
  indexingLogs IndexingLog[]
}

// Logs for indexing jobs
model IndexingLog {
  id           String    @id @default(cuid())
  indexingJobId String
  message      String
  level        LogLevel
  timestamp    DateTime  @default(now())
  metadata     Json?
  
  indexingJob IndexingJob @relation(fields: [indexingJobId], references: [id], onDelete: Cascade)
}

// Enum for data types to index
enum DataType {
  NFT_BIDS
  NFT_PRICES
  TOKEN_BORROW
  TOKEN_PRICES
  CUSTOM
}

// Enum for indexing job status
enum IndexingStatus {
  ACTIVE
  INACTIVE
  PAUSED
  ERROR
  COMPLETED
}

// Enum for log levels
enum LogLevel {
  INFO
  WARNING
  ERROR
  DEBUG
}
